"  Copyright (c) 2019 R. Tohid
"
"  Distributed under the Boost Software License, Version 1.0. (See
"  accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

set nu
set rnu
set hidden
set mouse=""
set showcmd
set smarttab
set wildmenu
set hlsearch
set tabstop=4
set expandtab
set incsearch
set autoindent
set cursorline
set cmdheight=1
set laststatus=2
set shiftwidth=2
set history=10000
set colorcolumn=90
set backupdir=/tmp
set directory=/tmp
set encoding=utf-8
set foldmethod=indent
set switchbuf=useopen
set ignorecase smartcase
set wildmode=longest,list
set backspace=indent,eol,start
set t_Co=256

" Maps
"=====
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

nnoremap <space>t :-1read $HOME/.vim/templates/python/license.py<CR>G

imap <c-right> <DEL>
imap <c-left> <BACKSPACE>

augroup templates
  au!
  " read in template files
  autocmd BufNewFile *.py silent! execute '0r $HOME/.vim/templates/python/license.'.expand("<afile>:e")
  autocmd BufNewFile *.cpp silent! execute '0r $HOME/.vim/templates/cpp/license.'.expand("<afile>:e")

  " parse special text in the templates after the read
  autocmd BufNewFile * %substitute#\[:VIM_EVAL:\]\(.\{-\}\)\[:END_EVAL:\]#\=eval(submatch(1))#ge
augroup END

" Commands
"=========
nnoremap <Leader>m :w <CR> :make<CR>
nnoremap <Leader>S :%s/\<<C-r><C-w>\>//g<Left><Left>
nnoremap <Leader>su :s/\<<C-r><C-w>\>//g<Left><Left>
nnoremap <Leader>t :tabnew 
nnoremap <Leader>d :Dox<cr>
nnoremap <Leader>D :w !diff % -<cr>
nnoremap <Leader>N :NERDTree<cr>
nnoremap <Leader>g :Goyo<cr>
nnoremap <Leader>G :Goyo!<cr>

nnoremap  <Leader>v :vsp 
nnoremap  <Leader>V :belowright vsp 
nnoremap  <Leader>h :sp 
nnoremap  <Leader>H :belowright sp 

" Avoid ESC
vmap <C-c> <Esc>
imap <C-c> <Esc>

" New line with ctrl+n
nnoremap <C-n> i<CR><ESC>

" Use Space to clear search buffer
nnoremap <silent> <space> :nohlsearch <CR><C-l>

"map <C-\> :vsp <CR>:exec("YcmCompleter GoTo")<CR>
"map <C-]> :sp <CR>:exec("YcmCompleter GoTo")<CR>

set listchars=tab:›\ ,trail:⋅,space:.

nnoremap <leader>l :call ListToggle()<cr>

function! ListToggle()
      if &list
        set list!
    else
        set list
    endif
endfunction
